<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- 인증 절차가 필요없는 경로 설정 -->
	<security:http pattern="/resources/**" security="none" />

	<!-- 인증 절차를 설정 -->
	<security:http>
		<!-- 인증 방식 설정: Form 인증 방식 -->
		<!-- <security:form-login login-page="/member/loginForm" username-parameter="mid" 
			password-parameter="mpassword" login-processing-url="/login" always-use-default-target="false" 
			default-target-url="/" authentication-failure-url="/member/loginForm" 
			/> -->

		<security:form-login login-page="/member/loginForm"
			username-parameter="mid" password-parameter="mpassword"
			login-processing-url="/login"
			authentication-success-handler-ref="authenticationSuccessHandler"
			authentication-failure-handler-ref="authenticationFailureHandler" />

		<!-- 로그아웃 설정 -->
		<!-- <security:logout logout-url="/logout" logout-success-url="/" 
			/> -->

		<security:logout logout-url="/logout"
			success-handler-ref="logoutSuccessHandler" />

		<!-- 사이트간 요청 위조 방지 비활성화 -->
		<!-- logout도 post 방식으로 요청(_csrf의 토큰을 전달해야 한다.) -->
		<security:csrf disabled="true" />

		<!-- 요청 URL 권한 설정 -->
		<security:intercept-url pattern="/**"
			access="permitAll" />

		<!-- 권한 없음일 경우 보여줄 페이지 설정 -->
		<security:access-denied-handler
			error-page="/error/403" />

		<!-- 로그인 중복 방지를 위한 설정 -->
		<security:session-management>
			<!-- max-session: 최대 로그인 수 error-if-maximum-exceeded="true": 다른 곳에서 로그인을 
				할 수 없음 expired-url: 로그인이 만료된 사용자가 이동하는 페이지 -->
			<!-- 이전 로그인을 유효하게 만들기 -->
			<!-- <security:concurrency-control max-sessions="1" error-if-maximum-exceeded="true" 
				/> -->
			<!-- 최종 로그인을 유효하게 만들기 -->
			<security:concurrency-control
				max-sessions="1" error-if-maximum-exceeded="false"
				expired-url="/member/loginForm" />
		</security:session-management>
	</security:http>

	<!-- 권한 계층 설정 -->
	<bean id="roleHierarchyAuthoritiesMapper"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyAuthoritiesMapper">
		<constructor-arg ref="roleHierarchyImpl" />
	</bean>
	<bean id="roleHierarchyImpl"
		class="org.springframework.security.access.hierarchicalroles.RoleHierarchyImpl">
		<property name="hierarchy">
			<value>
				ROLE_ADMIN > ROLE_MANAGER
				ROLE_MANAGER > ROLE_USER
			</value>
		</property>
	</bean>

	<!-- 인증 관리자 설정(아이디와 패스워드를 DB와 비교해서 로그인 처리 관리) -->
	<security:authentication-manager>
		<security:authentication-provider
			ref="daoAuthenticationProvider" />
	</security:authentication-manager>

	<bean id="daoAuthenticationProvider"
		class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="jdbcUserService" />
		<property name="authoritiesMapper"
			ref="roleHierarchyAuthoritiesMapper" />
	</bean>

	<security:jdbc-user-service
		id="jdbcUserService" data-source-ref="dataSource"
		users-by-username-query="SELECT mid, mpassword, menabled FROM member WHERE mid=?"
		authorities-by-username-query="SELECT mid, mrole FROM member WHERE mid=?" />

	<!-- 인증 성공 또는 실패시 실행되는 핸들러 객체 설정 -->
	<bean id="authenticationSuccessHandler"
		class="com.mycompany.webapp.security.AuthenticationSuccessHandler">
		<!-- 로그인 성공 후 리다이렉트로 이동할 경로 -->
		<property name="alwaysUseDefaultTargetUrl" value="false" />
		<property name="defaultTargetUrl" value="/" />
	</bean>
	<bean id="authenticationFailureHandler"
		class="com.mycompany.webapp.security.AuthenticationFailureHandler">
		<!-- 로그인 실패 후 리다이렉트로 이동할 경로 -->
		<property name="defaultFailureUrl" value="/loginForm" />
	</bean>

	<bean id="logoutSuccessHandler"
		class="com.mycompany.webapp.security.LogoutSuccessHandler">
		<!-- 로그아웃 성공 시 리다이렉트로 이동할 경로 -->
		<property name="defaultTargetUrl" value="/" />
	</bean>
</beans>